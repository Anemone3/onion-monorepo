generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  firstname String        
  lastname  String    
  email     String   @unique              
  password  String        
  profile   String   @default("https://i.pinimg.com/736x/96/83/aa/9683aaa7b396888f2f7a6df3197d2374.jpg")
  role      Role     @default(USER)
  createdAt DateTime @default(now())   
  updatedAt DateTime @updatedAt 
  customer Customer? @relation()
  wishlist Wishlist[]
}

model Customer{
  id Int @id @default(autoincrement())
  userId String @unique
  address String
  phone String
  departamento String
  country String
  zipcode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order[]
  
}

enum Role {
  ADMIN
  USER
  CUSTOMER
}


model Product {
  id String @id @default(uuid())
  name String @unique
  categories Category[] @relation("ProductCategories")
  description String? @db.LongText
  color String
  sweetness Int
  storageLife String
  culinaryUses Json
  image String? @unique
  origin String
  price  Decimal @db.Decimal(10,2) @default(0)
  stock Int
  slug String? @unique
  organic Boolean
  seasonal Boolean
  seasonalAvailability Json?
  sku String @unique
  orderDetail OrderDetail[]
  wishlist Wishlist[]
}




model Category {
  id Int @id @default(autoincrement())
  name String @unique
  products Product[] @relation("ProductCategories")
}

model Order{
  id Int @id @default(autoincrement())
  customerId Int
  paymentId String
  total Decimal
  status OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  orderDetail OrderDetail[]
  payment Payment @relation(fields: [paymentId],references: [id])
  customer Customer @relation(fields: [customerId],references: [id])
}
enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  SHIPPED
}
model OrderDetail{
  id Int @id @default(autoincrement())
  orderId Int
  productId String
  description String
  quantity Int
  price Decimal @db.Decimal(10,2)
  discount Decimal? @default(0) @db.Decimal(10,2)
  subtotal Decimal @db.Decimal(10,2)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  order Order @relation(fields: [orderId],references: [id])
  product Product @relation(fields: [productId],references: [id])
}



model Payment{
  id String @id @default(uuid())
  method String @unique
  order Order[]
}

model Wishlist{
  id Int @id @default(autoincrement())
  userId String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId],references: [id], onDelete: Cascade)


  @@unique([userId,productId])
}